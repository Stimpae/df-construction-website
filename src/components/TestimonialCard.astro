---
export interface Props {
  name: string;
  position?: string;
  company?: string;
  testimonial: string;
  rating?: number;
  image?: string;
}

const { name, position, company, testimonial, rating = 5, image = "/images/avatar-placeholder.png" } = Astro.props;

// Generate star rating
const stars = Array.from({ length: 5 }, (_, i) => i < rating);
---

<div class="bg-white rounded-lg shadow-md p-6 flex flex-col h-full">
  <!-- Star Rating -->
  <div class="flex mb-4">
    {stars.map(isFilled => (
      <svg 
        class={`w-5 h-5 ${isFilled ? 'text-yellow-500' : 'text-gray-300'}`} 
        fill="currentColor"
        viewBox="0 0 20 20"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z"/>
      </svg>
    ))}
  </div>
  
  <!-- Testimonial Content -->
  <div class="flex-grow">
    <p class="text-gray-700 italic mb-4">"{testimonial}"</p>
  </div>
  
  <!-- Client Info -->
  <div class="flex items-center mt-4">
    <div class="flex-shrink-0">
      <img class="h-10 w-10 rounded-full object-cover" src={image} alt={name} />
    </div>
    <div class="ml-3">
      <h4 class="text-sm font-medium text-secondary">{name}</h4>
      {(position || company) && (
        <p class="text-xs text-gray-500">
          {position}{position && company && ', '}{company}
        </p>
      )}
    </div>
  </div>
</div>